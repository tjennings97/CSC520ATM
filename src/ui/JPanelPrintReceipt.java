package ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import main.Main;
import model.Account;
import model.Machine;
import util.Misc;
import util.PrintReceiptAsync;

public class JPanelPrintReceipt extends JPanel implements ActionListener
{
	// A unique ID required because this class is serializable
	// This can be auto generated by hovering over the warning on the class name
	private static final long serialVersionUID = 1083844952856829333L;

	private JFrameATM atmFrame;
	
	public final JLabel lblTitle;
	public final JLabel lblPleaseWait;
	
	/**
	 * Constructor for the Welcome panel
	 * 
	 * @param appFrame Parent frame that will hold the panels created by actions performed by this class
	 */
	public JPanelPrintReceipt(JFrameATM atmFrame) {
		
		// Save the application frame
		this.atmFrame = atmFrame;
		
		// Reset the frame's button action listeners
		atmFrame.setButtonActionDefaults();
		
		// Set the panel size to match the global parameters
		this.setSize(Main.ATM_PANEL_WIDTH, Main.ATM_PANEL_HEIGHT);
		
		// Set frame background color
		this.setBackground(Main.ATM_CONTENT_PANEL_BACKGROUND);

        // Number of rows and heights
		int panelRows = 7;
        int[] rows = new int[panelRows];
        Arrays.fill(rows, (Main.ATM_PANEL_HEIGHT / panelRows));
		
		// Number of columns and widths
        int panelColumns = 1;
        int[] columns = new int[panelColumns];
        Arrays.fill(columns, (Main.ATM_PANEL_WIDTH / panelColumns));
		
		// Set layout
		GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.rowHeights = rows;
        gridBagLayout.columnWidths = columns;
		this.setLayout(gridBagLayout);
		
		// Set initial constraints
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.insets = new Insets(0,0,0,0);
		
		// Create and add components for this panel
		
		//this.addFocusListener(this);
		
		lblTitle = new JLabel("Your Receipt is Printing. ");
		lblTitle.setFont(new Font("Tahoma", Font.BOLD, 22));
		constraints.gridx = 0;
		constraints.gridy = 1;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblTitle, constraints);
		
		lblPleaseWait = new JLabel("Please wait. ");
		lblPleaseWait.setFont(new Font("Tahoma", Font.BOLD, 22));
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblPleaseWait, constraints);

		// All done
		return;
	}
	
	public void showPanel() 
	{
		// Set this panel as the frame's content panel and update the frame title
		atmFrame.setContentPanel(this);
		atmFrame.setTitle(Main.ATM_FRAME_TITLE + " - (" + this.getClass().getSimpleName() + ")");
		
		// Always get source account
		int identification = atmFrame.getPerson().getIdentification();
		int sourceAccountNumber = atmFrame.getSourceAccountNumber();
		Account sourceAccount = Account.getAccount(identification, sourceAccountNumber);
		
		// Build the receipt based on the transaction type
		Component component = null;
		String transactionType = atmFrame.getTransactionType();
		
		switch (transactionType)
		{
			case "BALANCE":
			{
				// Build receipt
				component = buildBalanceReciept(sourceAccount);
				
				break;
			}
			
			case "DEPOSIT":
			{
				// Build receipt
				component = buildDepositReciept(sourceAccount);
				
				break;
			}
			
			case "TRANSFER":
			{
				// Get target account
				int targetAccountNumber = atmFrame.getTargetAccountNumber();
				Account targetAccount = Account.getAccount(identification, targetAccountNumber);
				
				// Build receipt
				component = buildTransferReciept(sourceAccount
						                       , targetAccount);
				
				break;
			}
			
			case "WITHDRAWAL":
			{
				// Build receipt
				component = buildWithdrawalReciept(sourceAccount);
				
				break;
			}
			
			case "TECHNICIAN":
			{
				// Get machine instance
				Machine machine = atmFrame.getMachine();
				
				// Build receipt
				component = buildTechnicianReciept(machine);
				
				break;
			}
		
			default:
			{
		    	System.err.println(this.getClass().getTypeName() + "."
				         + (new Throwable().getStackTrace()[0].getMethodName())
				         + ": ERROR: Invalid TransactionType: >" + transactionType + "<"
				          );
				break;
			}
		}
		
		// Print receipt asynchronous
		PrintReceiptAsync printReceiptAsync = new PrintReceiptAsync(atmFrame
				                                                  , component);
		printReceiptAsync.execute();
		
		// Update amount of paper (5 inches are used)
		atmFrame.getMachine().adjustPaper(-5);
		
		// Re-paint and re-validate to display the panel
		atmFrame.repaint();
		atmFrame.revalidate();

		// All done
		return;
	}
	
	/**
	 * Handles the actions that are requested by this panel
	 * 
	 * @param actionEvent An ActionEvent containing the details of the event
	 */
	@Override
	public void actionPerformed(ActionEvent actionEvent) 
	{
		String action = actionEvent.getActionCommand();
		
		if(Main.DEBUG)
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": Got action: : " + action
			          );
		
		switch (action) {
		
			default:
			{	
				// No actions define at this point in time - so not an error to hit the default case.
		    	//System.err.println(this.getClass().getTypeName() + "."
				//         + (new Throwable().getStackTrace()[0].getMethodName())
				//         + ": ERROR: No action defined for action: >" + action + "<"
				//          );
				break;
			}
		}
		
		// All done
		return;
	}	
	
	private Component buildBalanceReciept(Account sourceAccount)
	{
		JTextPane receipt = null;
		
		// Create receipt

		// See: https://stackoverflow.com/questions/15600100/jtextpane-formatting

		// Build the formats

		// Heading
        SimpleAttributeSet heading = new SimpleAttributeSet();
        StyleConstants.setFontFamily(heading, "SansSerif");
        StyleConstants.setFontSize(heading, 16);
        StyleConstants.setBold(heading, true);
        StyleConstants.setForeground(heading, Color.blue);

        // Normal
        SimpleAttributeSet normal = new SimpleAttributeSet();
        StyleConstants.setFontFamily(normal, "SansSerif");
        StyleConstants.setFontSize(normal, 16);

        // Balance
        SimpleAttributeSet balance = new SimpleAttributeSet();
        StyleConstants.setFontFamily(balance, "SansSerif");
        StyleConstants.setFontSize(balance, 18);
        StyleConstants.setBold(balance, true);
        StyleConstants.setItalic(balance, true);
        StyleConstants.setForeground(balance, Color.red);
        
		// Get today's date/time
	    //DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
	    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd MMM yyyy @ HH:mm:ss");  
	    LocalDateTime now = LocalDateTime.now();  
	    String currentDateTime = dateTimeFormatter.format(now);  
		
		// Assemble the document
        receipt = new JTextPane();
        StyledDocument doc = (StyledDocument) receipt.getDocument();        
        
        try 
        {
			doc.insertString(doc.getLength(),               "Balance Receipt: ", heading);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Date: " + currentDateTime + "\n", normal);
	        doc.insertString(doc.getLength(),        "\n" + sourceAccount.getAccountType().getText() + ": " 
	                                                      + Integer.toString(sourceAccount.getAccountNumber())+ "\n", normal);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Balance: " + "$ " + Misc.roundToMoney(sourceAccount.getBalance()).toString()+ "\n", balance);
		} 
        catch (BadLocationException blEx) 
        {
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": BadLocationException : : " + blEx
			          );
		}
		
		// All done
		return receipt;
	}
	
	private Component buildDepositReciept(Account sourceAccount)
	{
		JTextPane receipt = null;
		
		// Create receipt

		// See: https://stackoverflow.com/questions/15600100/jtextpane-formatting

		// Build the formats

		// Heading
        SimpleAttributeSet heading = new SimpleAttributeSet();
        StyleConstants.setFontFamily(heading, "SansSerif");
        StyleConstants.setFontSize(heading, 16);
        StyleConstants.setBold(heading, true);
        StyleConstants.setForeground(heading, Color.blue);

        // Normal
        SimpleAttributeSet normal = new SimpleAttributeSet();
        StyleConstants.setFontFamily(normal, "SansSerif");
        StyleConstants.setFontSize(normal, 16);

        // Balance
        SimpleAttributeSet balance = new SimpleAttributeSet();
        StyleConstants.setFontFamily(balance, "SansSerif");
        StyleConstants.setFontSize(balance, 18);
        StyleConstants.setBold(balance, true);
        StyleConstants.setItalic(balance, true);
        StyleConstants.setForeground(balance, Color.red);
        
		// Get today's date/time
	    //DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
	    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd MMM yyyy @ HH:mm:ss");  
	    LocalDateTime now = LocalDateTime.now();  
	    String currentDateTime = dateTimeFormatter.format(now);  
		
		// Assemble the document
        receipt = new JTextPane();
        StyledDocument doc = (StyledDocument) receipt.getDocument();        
        
        try 
        {
			doc.insertString(doc.getLength(),               "Deposit Receipt: ", heading);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Date: " + currentDateTime + "\n", normal);
	        doc.insertString(doc.getLength(),        "\n" + sourceAccount.getAccountType().getText() + ": " 
	                                                      + Integer.toString(sourceAccount.getAccountNumber())+ "\n", normal);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Balance: " + "$ " + Misc.roundToMoney(sourceAccount.getBalance()).toString()+ "\n", balance);
		} 
        catch (BadLocationException blEx) 
        {
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": BadLocationException : : " + blEx
			          );
		}
		
		// All done
		return receipt;
	}
	
	private Component buildTransferReciept(Account sourceAccount
			                             , Account targetAccount)
	{
		JTextPane receipt = null;
		
		// Create receipt

		// See: https://stackoverflow.com/questions/15600100/jtextpane-formatting

		// Build the formats

		// Heading
        SimpleAttributeSet heading = new SimpleAttributeSet();
        StyleConstants.setFontFamily(heading, "SansSerif");
        StyleConstants.setFontSize(heading, 16);
        StyleConstants.setBold(heading, true);
        StyleConstants.setForeground(heading, Color.blue);

        // Normal
        SimpleAttributeSet normal = new SimpleAttributeSet();
        StyleConstants.setFontFamily(normal, "SansSerif");
        StyleConstants.setFontSize(normal, 16);

        // Balance
        SimpleAttributeSet balance = new SimpleAttributeSet();
        StyleConstants.setFontFamily(balance, "SansSerif");
        StyleConstants.setFontSize(balance, 18);
        StyleConstants.setBold(balance, true);
        StyleConstants.setItalic(balance, true);
        StyleConstants.setForeground(balance, Color.red);
        
		// Get today's date/time
	    //DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
	    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd MMM yyyy @ HH:mm:ss");  
	    LocalDateTime now = LocalDateTime.now();  
	    String currentDateTime = dateTimeFormatter.format(now);  
		
		// Assemble the document
        receipt = new JTextPane();
        StyledDocument doc = (StyledDocument) receipt.getDocument();        
        
        try 
        {
			doc.insertString(doc.getLength(),               "Transfer Receipt: ", heading);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Date: " + currentDateTime + "\n", normal);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Source Account: "
	                                                      + sourceAccount.getAccountType().getText() + ": " 
                                                          + Integer.toString(sourceAccount.getAccountNumber())+ "\n", normal);
            doc.insertString(doc.getLength(), "\n" + "\n" + "Balance: " + "$ " + Misc.roundToMoney(sourceAccount.getBalance()).toString()+ "\n", balance);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Target Account: "
                                                          + targetAccount.getAccountType().getText() + ": " 
                                                          + Integer.toString(targetAccount.getAccountNumber())+ "\n", normal);
            doc.insertString(doc.getLength(), "\n" + "\n" + "Balance: " + "$ " + Misc.roundToMoney(targetAccount.getBalance()).toString()+ "\n", balance);
		} 
        catch (BadLocationException blEx) 
        {
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": BadLocationException : : " + blEx
			          );
		}
		
		// All done
		return receipt;
	}
	
	private Component buildWithdrawalReciept(Account sourceAccount)
	{
		JTextPane receipt = null;
		
		// Create receipt

		// See: https://stackoverflow.com/questions/15600100/jtextpane-formatting

		// Build the formats

		// Heading
        SimpleAttributeSet heading = new SimpleAttributeSet();
        StyleConstants.setFontFamily(heading, "SansSerif");
        StyleConstants.setFontSize(heading, 16);
        StyleConstants.setBold(heading, true);
        StyleConstants.setForeground(heading, Color.blue);

        // Normal
        SimpleAttributeSet normal = new SimpleAttributeSet();
        StyleConstants.setFontFamily(normal, "SansSerif");
        StyleConstants.setFontSize(normal, 16);

        // Balance
        SimpleAttributeSet balance = new SimpleAttributeSet();
        StyleConstants.setFontFamily(balance, "SansSerif");
        StyleConstants.setFontSize(balance, 18);
        StyleConstants.setBold(balance, true);
        StyleConstants.setItalic(balance, true);
        StyleConstants.setForeground(balance, Color.red);
        
		// Get today's date/time
	    //DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
	    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd MMM yyyy @ HH:mm:ss");  
	    LocalDateTime now = LocalDateTime.now();  
	    String currentDateTime = dateTimeFormatter.format(now);  
		
		// Assemble the document
        receipt = new JTextPane();
        StyledDocument doc = (StyledDocument) receipt.getDocument();        
        
        try 
        {
			doc.insertString(doc.getLength(),               "Withdrawal Receipt: ", heading);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Date: " + currentDateTime + "\n", normal);
	        doc.insertString(doc.getLength(),        "\n" + sourceAccount.getAccountType().getText() + ": " 
	                                                      + Integer.toString(sourceAccount.getAccountNumber())+ "\n", normal);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Balance: " + "$ " + Misc.roundToMoney(sourceAccount.getBalance()).toString()+ "\n", balance);
		} 
        catch (BadLocationException blEx) 
        {
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": BadLocationException : : " + blEx
			          );
		}
		
		// All done
		return receipt;
	}
	
	private Component buildTechnicianReciept(Machine machine)
	{
		JTextPane receipt = null;
		
		// Create receipt

		// See: https://stackoverflow.com/questions/15600100/jtextpane-formatting

		// Build the formats

		// Heading
        SimpleAttributeSet heading = new SimpleAttributeSet();
        StyleConstants.setFontFamily(heading, "SansSerif");
        StyleConstants.setFontSize(heading, 16);
        StyleConstants.setBold(heading, true);
        StyleConstants.setForeground(heading, Color.blue);

        // Normal
        SimpleAttributeSet normal = new SimpleAttributeSet();
        StyleConstants.setFontFamily(normal, "SansSerif");
        StyleConstants.setFontSize(normal, 16);

        // Cash Status Format
        SimpleAttributeSet cashStatusFormat = new SimpleAttributeSet();
        StyleConstants.setFontFamily(cashStatusFormat, "SansSerif");
        StyleConstants.setFontSize(cashStatusFormat, 16);
        StyleConstants.setBold(cashStatusFormat, true);
        StyleConstants.setItalic(cashStatusFormat, false);
        StyleConstants.setForeground(cashStatusFormat, machine.getCashStatusColor());

        // Paper Status Format
        SimpleAttributeSet paperStatusFormat = new SimpleAttributeSet();
        StyleConstants.setFontFamily(paperStatusFormat, "SansSerif");
        StyleConstants.setFontSize(paperStatusFormat, 16);
        StyleConstants.setBold(paperStatusFormat, true);
        StyleConstants.setItalic(paperStatusFormat, false);
        StyleConstants.setForeground(paperStatusFormat, machine.getPaperStatusColor());

        // Deposit Status Format
        SimpleAttributeSet depositStatusFormat = new SimpleAttributeSet();
        StyleConstants.setFontFamily(depositStatusFormat, "SansSerif");
        StyleConstants.setFontSize(depositStatusFormat, 16);
        StyleConstants.setBold(depositStatusFormat, true);
        StyleConstants.setItalic(depositStatusFormat, false);
        StyleConstants.setForeground(depositStatusFormat, machine.getDepositStatusColor());
        
		// Get today's date/time
	    //DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
	    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd MMM yyyy @ HH:mm:ss");  
	    LocalDateTime now = LocalDateTime.now();  
	    String currentDateTime = dateTimeFormatter.format(now);  
		
		// Assemble the document
        receipt = new JTextPane();
        StyledDocument doc = (StyledDocument) receipt.getDocument();        
        
        try 
        {
			doc.insertString(doc.getLength(),               "Technician Receipt: ", heading);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Date: " + currentDateTime + "\n", normal);
	        doc.insertString(doc.getLength(), "\n" + "\n" + "Cash Status: ", normal);
	        doc.insertString(doc.getLength(),               machine.getCashStatus() + "\n", cashStatusFormat);
	        doc.insertString(doc.getLength(),               "Paper Status: ", normal);
	        doc.insertString(doc.getLength(),               machine.getPaperStatus() + "\n", paperStatusFormat);
	        doc.insertString(doc.getLength(),               "Deposit Status: ", normal);
	        doc.insertString(doc.getLength(),               machine.getDepositStatus() + "\n", depositStatusFormat);
		} 
        catch (BadLocationException blEx) 
        {
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": BadLocationException : : " + blEx
			          );
		}
		
		// All done
		return receipt;
	}
	
}
