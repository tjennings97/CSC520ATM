package ui;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Arrays;

import javax.swing.JLabel;
import javax.swing.JPanel;

import main.Main;

public class JPanelWelcome extends JPanel implements ActionListener 
{
	// A unique ID required because this class is serializable
	// This can be auto generated by hovering over the warning on the class name
	private static final long serialVersionUID = 4580583296173954650L;

	private final String ACTION_ENTER = "ENTER";
	private final String ACTION_ESCAPE = "ESCAPE";

	JFrameATM atmFrame;
	
	JLabel lblWelcome;
	JLabel lblTaKeBoBank;
	JLabel lblEnter;
	
	KeyEventDispatcher keyEventDispatcher = null;
	
	/**
	 * Constructor for the Welcome panel
	 * 
	 * @param appFrame Parent frame that will hold the panels created by actions performed by this class
	 */
	public JPanelWelcome(JFrameATM atmFrame) {
		
		// Save the application frame
		this.atmFrame = atmFrame;
		
		// Reset the frame's button action listeners
		atmFrame.setButtonActionDefaults();
		
		// Set the panel size to match the global parameters
		this.setSize(Main.ATM_PANEL_WIDTH, Main.ATM_PANEL_HEIGHT);
		
		// Set frame background color
		this.setBackground(Main.ATM_CONTENT_PANEL_BACKGROUND);

        // Number of rows and heights
		int panelRows = 7;
        int[] rows = new int[panelRows];
        Arrays.fill(rows, (Main.ATM_PANEL_HEIGHT / panelRows));
		
		// Number of columns and widths
        int panelColumns = 1;
        int[] columns = new int[panelColumns];
        Arrays.fill(columns, (Main.ATM_PANEL_WIDTH / panelColumns));
		
		// Set layout
		GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.rowHeights = rows;
        gridBagLayout.columnWidths = columns;
		this.setLayout(gridBagLayout);
		
		// Set initial constraints
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.insets = new Insets(0,0,0,0);
		
		// Create and add components for this panel
		
		lblWelcome = new JLabel("Welcome ");
		lblWelcome.setFont(new Font("Tahoma", Font.BOLD, 34));
		lblWelcome.setForeground(new Color(0xB38F00));
		//lblWelcome.setForeground(Color.YELLOW);
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblWelcome, constraints);
		
		lblTaKeBoBank = new JLabel("TaKeBo Bank ATM ");
		lblTaKeBoBank.setFont(new Font("Matura MT Script Capitals", Font.ITALIC | Font.BOLD, 34));
		lblTaKeBoBank.setForeground(new Color(0xB38F00));
		//lblTaKeBoBank.setForeground(Color.YELLOW);
		constraints.gridx = 0;
		constraints.gridy = 1;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblTaKeBoBank, constraints);
		
		lblEnter = new JLabel("Press ENTER to continue... ");
		lblEnter.setFont(new Font("Tahoma", Font.BOLD, 34));
		lblEnter.setForeground(new Color(0xB38F00));
		//lblEnter.setForeground(Color.YELLOW);
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.gridwidth = 1;
		constraints.gridheight = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		this.add(lblEnter, constraints);
		
		// Setup a KeyListener on a SPECIFIC text field
		/*
		<txtField>.addKeyListener(new KeyListener() {
			@Override
			public void keyTyped(KeyEvent ke) {
				if (Main.DEBUG)
			    	System.err.println(this.getClass().getTypeName() + "."
					         + (new Throwable().getStackTrace()[0].getMethodName())
					         + "KED: Key press code: " + ke.getKeyCode()
					        + ", char: " + ke.getKeyChar()
					          );
				return;
			}

			@Override
			public void keyPressed(KeyEvent ke) {
				if (Main.DEBUG)
			    	System.err.println(this.getClass().getTypeName() + "."
					         + (new Throwable().getStackTrace()[0].getMethodName())
					         + "KED: Key press code: " + ke.getKeyCode()
					        + ", char: " + ke.getKeyChar()
					          );
				return;
			}

			@Override
			public void keyReleased(KeyEvent ke) {
				if (Main.DEBUG)
			    	System.err.println(this.getClass().getTypeName() + "."
					         + (new Throwable().getStackTrace()[0].getMethodName())
					         + "KED: Key press code: " + ke.getKeyCode()
					        + ", char: " + ke.getKeyChar()
					          );
				return;
			}
		});
		*/
		
		// Setup a KeyListener
		// This code works on a panel.  
		// The issue is that the mouse pointer can be over any number of components 
		// on the panel so you would need to setup a listener on every component.
		// This code will intercept the KeyEvent before any of the other components do.
		// Setting the return to "true" tells the KeyboardFocusManager should take 
		// no further action with regard to the KeyEvent 
		keyEventDispatcher = new KeyEventDispatcher() 
		                     {
		 				        @Override
		 				        public boolean dispatchKeyEvent(KeyEvent ke) {
		 				        	boolean handled = false;
		 				            switch (ke.getID()) {
		 				            /*
		 			                case KeyEvent.KEY_TYPED:
		 			    				if (Main.DEBUG)
			 						    	System.err.println(this.getClass().getTypeName() + "."
			 								         + (new Throwable().getStackTrace()[0].getMethodName())
			 								         + "KED: Key press code: " + ke.getKeyCode()
			 								        + ", char: " + ke.getKeyChar()
			 								          );
		 			                    break;
		 			                */
		 			                case KeyEvent.KEY_PRESSED:
		 			    				if (Main.DEBUG)
			 						    	System.err.println(this.getClass().getTypeName() + "."
			 								         + (new Throwable().getStackTrace()[0].getMethodName())
			 								         + "KED: Key press code: " + ke.getKeyCode()
			 								        + ", char: " + ke.getKeyChar()
			 								          );
		 			                    if (ke.getKeyCode() == KeyEvent.VK_ENTER)
		 			                    {
		 			                    	handled = true;
		 			        				ActionEvent actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ACTION_ENTER);
		 			        				actionPerformed(actionEvent);
		 			                    }
		 			                    else if (ke.getKeyCode() == KeyEvent.VK_ESCAPE)
		 			                    {
		 			                    	handled = true;
		 			        				ActionEvent actionEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ACTION_ESCAPE);
		 			        				actionPerformed(actionEvent);
		 			                    }
		 			    				break;
		 			                /*
		 			                case KeyEvent.KEY_RELEASED:
		 			    				if (Main.DEBUG)
			 						    	System.err.println(this.getClass().getTypeName() + "."
			 								         + (new Throwable().getStackTrace()[0].getMethodName())
			 								         + "KED: Key press code: " + ke.getKeyCode()
			 								        + ", char: " + ke.getKeyChar()
			 								          );
		 			                    break;
		 			                */
		 			                default:
		 			                	// No action here
		 			                	// We're just not interested in this key
		 			                    break;
		 				            }
		 				            return handled;
		 				        }
		 				    };
		KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(keyEventDispatcher);

		// All done
		return;
	}
	
	public void showPanel() {
		
		// Set this panel as the frame's content panel and update the frame title
		atmFrame.setContentPanel(this);
		atmFrame.setTitle(Main.ATM_FRAME_TITLE + " - (" + this.getClass().getSimpleName() + ")");
		
		// Re-paint and re-validate to display the panel
		atmFrame.repaint();
		atmFrame.revalidate();

		// All done
		return;
	}
	
	/**
	 * Handles the actions that are requested by this panel
	 * 
	 * @param actionEvent An ActionEvent containing the details of the event
	 */
	@Override
	public void actionPerformed(ActionEvent actionEvent) {

		String action = actionEvent.getActionCommand();
		
		if(Main.DEBUG)
	    	System.err.println(this.getClass().getTypeName() + "."
			         + (new Throwable().getStackTrace()[0].getMethodName())
			         + ": Got action: : " + action
			          );
		
		switch (action) 
		{
			
			case ACTION_ENTER:
			{
				// Remove the Keyboard manager as we are leaving this panel
	         	KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyEventDispatcher);
				// Create the logon panel and place it on the frame
				JPanelLogon panel = new JPanelLogon(atmFrame);
				panel.showPanel();
				
				break;
			}
			
			case ACTION_ESCAPE:
			{
				// Remove the Keyboard manager as we are leaving this panel
	         	KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyEventDispatcher);
				// Terminate the program
				System.exit(0);
				
				break;
			}
			
			default:
			{
		    	System.err.println(this.getClass().getTypeName() + "."
				         + (new Throwable().getStackTrace()[0].getMethodName())
				         + ": ERROR: action: >" + action + "<"
				          );
				break;
			}
		}
		
		// All done
		return;
	}

}
